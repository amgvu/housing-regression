import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import numpy as np  

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

housing = fetch_california_housing(as_frame=True)
df = housing.frame

X = df.drop('MedHouseVal', axis=1) 
y = df['MedHouseVal']    

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train = torch.tensor(X_train, dtype=torch.float32).to(device)
y_train = torch.tensor(y_train.values, dtype=torch.float32).to(device).reshape(-1, 1) 
X_test = torch.tensor(X_test, dtype=torch.float32).to(device)
y_test = torch.tensor(y_test.values, dtype=torch.float32).to(device).reshape(-1, 1) 


input_dim = X_train.shape[1]  
hidden_dim = 64 
output_dim = 1

model = nn.Sequential(
    nn.Linear(input_dim, hidden_dim),
    nn.ReLU(), 
    nn.Linear(hidden_dim, output_dim)
).to(device)

criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001) 

num_epochs = 100  
batch_size = 32 

for epoch in range(num_epochs):
    for i in range(0, X_train.shape[0], batch_size):
        X_batch = X_train[i:i+batch_size]
        y_batch = y_train[i:i+batch_size]

        y_pred = model(X_batch)
        loss = criterion(y_pred, y_batch)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    if (epoch + 1) % 10 == 0:
        print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {loss.item():.4f}')

model.eval()  
with torch.no_grad(): 
    y_pred_test = model(X_test)
    test_loss = criterion(y_pred_test, y_test)
    print(f"Test Loss: {test_loss.item():.4f}")

X_train_cpu = X_train.cpu()
y_train_cpu = y_train.cpu()
if X_train_cpu.shape[1] == 1: 
    plt.scatter(X_train_cpu.numpy(), y_train_cpu.numpy(), label='Training Data')
    predicted_y_all = model(X_train).cpu()
    plt.plot(X_train_cpu.numpy(), predicted_y_all.detach().numpy(), 'r-', label='Regression Line')
    plt.xlabel('Feature 1 (Scaled)')
    plt.ylabel('Median House Value')
    plt.legend()
    plt.show()